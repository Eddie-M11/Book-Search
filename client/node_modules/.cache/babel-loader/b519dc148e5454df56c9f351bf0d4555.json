{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emona\\\\Desktop\\\\Bootcamp\\\\Book-Search\\\\client\\\\src\\\\pages\\\\SearchBooks.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from \"react-bootstrap\";\nimport Auth from \"../utils/auth\";\nimport { searchGoogleBooks } from \"../utils/API\";\nimport { saveBookIds, getSavedBookIds } from \"../utils/localStorage\";\nimport { useMutation } from \"@apollo/client\";\nimport { SAVE_BOOK } from \"../utils/mutations\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SearchBooks = () => {\n  _s();\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n  const [saveBook, {\n    error\n  }] = useMutation(SAVE_BOOK);\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    if (!searchInput) {\n      return false;\n    }\n    try {\n      const response = await searchGoogleBooks(searchInput);\n      if (!response.ok) {\n        throw new Error(\"something went wrong!\");\n      }\n      const {\n        items\n      } = await response.json();\n      const bookData = items.map(book => {\n        var _book$volumeInfo$imag;\n        return {\n          bookId: book.id,\n          authors: book.volumeInfo.authors || [\"No author to display\"],\n          title: book.volumeInfo.title,\n          description: book.volumeInfo.description,\n          image: ((_book$volumeInfo$imag = book.volumeInfo.imageLinks) === null || _book$volumeInfo$imag === void 0 ? void 0 : _book$volumeInfo$imag.thumbnail) || \"\"\n        };\n      });\n      setSearchedBooks(bookData);\n      setSearchInput(\"\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async bookId => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find(book => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n    if (!token) {\n      return false;\n    }\n    try {\n      const response = await saveBook({\n        variables: {\n          input: bookToSave\n        }\n      });\n      if (!response) {\n        throw new Error(\"something went wrong!\");\n      }\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n      fluid: true,\n      className: \"text-light bg-dark\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Search for Books!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleFormSubmit,\n          children: /*#__PURE__*/_jsxDEV(Form.Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              xs: 12,\n              md: 8,\n              children: /*#__PURE__*/_jsxDEV(Form.Control, {\n                name: \"searchInput\",\n                value: searchInput,\n                onChange: e => setSearchInput(e.target.value),\n                type: \"text\",\n                size: \"lg\",\n                placeholder: \"Search for a book\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              xs: 12,\n              md: 4,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"success\",\n                size: \"lg\",\n                children: \"Submit Search\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: searchedBooks.length ? `Viewing ${searchedBooks.length} results:` : \"Search for a book to begin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardColumns, {\n        children: searchedBooks.map(book => {\n          return /*#__PURE__*/_jsxDEV(Card, {\n            border: \"dark\",\n            children: [book.image ? /*#__PURE__*/_jsxDEV(Card.Img, {\n              src: book.image,\n              alt: `The cover for ${book.title}`,\n              variant: \"top\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 19\n            }, this) : null, /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                children: book.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"small\",\n                children: [\"Authors: \", book.authors]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: book.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 19\n              }, this), Auth.loggedIn() && /*#__PURE__*/_jsxDEV(Button, {\n                disabled: savedBookIds === null || savedBookIds === void 0 ? void 0 : savedBookIds.some(savedBookId => savedBookId === book.bookId),\n                className: \"btn-block btn-info\",\n                onClick: () => handleSaveBook(book.bookId),\n                children: savedBookIds !== null && savedBookIds !== void 0 && savedBookIds.some(savedBookId => savedBookId === book.bookId) ? \"This book has already been saved!\" : \"Save this Book!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 17\n            }, this)]\n          }, book.bookId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(SearchBooks, \"Z8FfAaMuwxFUL92FchbfJmS4K5w=\", false, function () {\n  return [useMutation];\n});\n_c = SearchBooks;\nexport default SearchBooks;\nvar _c;\n$RefreshReg$(_c, \"SearchBooks\");","map":{"version":3,"names":["React","useState","useEffect","Jumbotron","Container","Col","Form","Button","Card","CardColumns","Auth","searchGoogleBooks","saveBookIds","getSavedBookIds","useMutation","SAVE_BOOK","SearchBooks","searchedBooks","setSearchedBooks","searchInput","setSearchInput","savedBookIds","setSavedBookIds","saveBook","error","handleFormSubmit","event","preventDefault","response","ok","Error","items","json","bookData","map","book","bookId","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","err","console","handleSaveBook","bookToSave","find","token","loggedIn","getToken","variables","input","e","target","value","length","some","savedBookId"],"sources":["C:/Users/emona/Desktop/Bootcamp/Book-Search/client/src/pages/SearchBooks.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Jumbotron,\r\n  Container,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  Card,\r\n  CardColumns,\r\n} from \"react-bootstrap\";\r\n\r\nimport Auth from \"../utils/auth\";\r\nimport { searchGoogleBooks } from \"../utils/API\";\r\nimport { saveBookIds, getSavedBookIds } from \"../utils/localStorage\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { SAVE_BOOK } from \"../utils/mutations\";\r\n\r\nconst SearchBooks = () => {\r\n  // create state for holding returned google api data\r\n  const [searchedBooks, setSearchedBooks] = useState([]);\r\n  // create state for holding our search field data\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n\r\n  // create state to hold saved bookId values\r\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\r\n\r\n  const [saveBook, { error }] = useMutation(SAVE_BOOK);\r\n\r\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\r\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\r\n  useEffect(() => {\r\n    return () => saveBookIds(savedBookIds);\r\n  });\r\n\r\n  // create method to search for books and set state on form submit\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!searchInput) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await searchGoogleBooks(searchInput);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"something went wrong!\");\r\n      }\r\n\r\n      const { items } = await response.json();\r\n\r\n      const bookData = items.map((book) => ({\r\n        bookId: book.id,\r\n        authors: book.volumeInfo.authors || [\"No author to display\"],\r\n        title: book.volumeInfo.title,\r\n        description: book.volumeInfo.description,\r\n        image: book.volumeInfo.imageLinks?.thumbnail || \"\",\r\n      }));\r\n\r\n      setSearchedBooks(bookData);\r\n      setSearchInput(\"\");\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // create function to handle saving a book to our database\r\n  const handleSaveBook = async (bookId) => {\r\n    // find the book in `searchedBooks` state by the matching id\r\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\r\n\r\n    // get token\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n    try {\r\n      const response = await saveBook({\r\n        variables: {\r\n          input: bookToSave,\r\n        },\r\n      });\r\n\r\n      if (!response) {\r\n        throw new Error(\"something went wrong!\");\r\n      }\r\n      // if book successfully saves to user's account, save book id to state\r\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className=\"text-light bg-dark\">\r\n        <Container>\r\n          <h1>Search for Books!</h1>\r\n          <Form onSubmit={handleFormSubmit}>\r\n            <Form.Row>\r\n              <Col xs={12} md={8}>\r\n                <Form.Control\r\n                  name=\"searchInput\"\r\n                  value={searchInput}\r\n                  onChange={(e) => setSearchInput(e.target.value)}\r\n                  type=\"text\"\r\n                  size=\"lg\"\r\n                  placeholder=\"Search for a book\"\r\n                />\r\n              </Col>\r\n              <Col xs={12} md={4}>\r\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\r\n                  Submit Search\r\n                </Button>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form>\r\n        </Container>\r\n      </Jumbotron>\r\n\r\n      <Container>\r\n        <h2>\r\n          {searchedBooks.length\r\n            ? `Viewing ${searchedBooks.length} results:`\r\n            : \"Search for a book to begin\"}\r\n        </h2>\r\n        <CardColumns>\r\n          {searchedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border=\"dark\">\r\n                {book.image ? (\r\n                  <Card.Img\r\n                    src={book.image}\r\n                    alt={`The cover for ${book.title}`}\r\n                    variant=\"top\"\r\n                  />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className=\"small\">Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  {Auth.loggedIn() && (\r\n                    <Button\r\n                      disabled={savedBookIds?.some(\r\n                        (savedBookId) => savedBookId === book.bookId\r\n                      )}\r\n                      className=\"btn-block btn-info\"\r\n                      onClick={() => handleSaveBook(book.bookId)}\r\n                    >\r\n                      {savedBookIds?.some(\r\n                        (savedBookId) => savedBookId === book.bookId\r\n                      )\r\n                        ? \"This book has already been saved!\"\r\n                        : \"Save this Book!\"}\r\n                    </Button>\r\n                  )}\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBooks;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}